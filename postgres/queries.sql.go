// Code generated by sqlc. DO NOT EDIT.
// source: queries.sql

package postgres

import (
	"context"
)

const createProject = `-- name: CreateProject :one
INSERT INTO projects (name, description, start_date, end_date, active)
VALUES ($1, $2, $3, $4, $5) RETURNING id, name, description, start_date, end_date, active
`

type CreateProjectParams struct {
	Name        string `json:"name"`
	Description string `json:"description"`
	StartDate   string `json:"start_date"`
	EndDate     string `json:"end_date"`
	Active      bool   `json:"active"`
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (Project, error) {
	row := q.db.QueryRowContext(ctx, createProject,
		arg.Name,
		arg.Description,
		arg.StartDate,
		arg.EndDate,
		arg.Active,
	)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.StartDate,
		&i.EndDate,
		&i.Active,
	)
	return i, err
}

const deleteProjectById = `-- name: DeleteProjectById :exec
DELETE FROM projects
WHERE id = $1
`

func (q *Queries) DeleteProjectById(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteProjectById, id)
	return err
}

const getProjectById = `-- name: GetProjectById :one
SELECT id, name, description, start_date, end_date, active FROM projects
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProjectById(ctx context.Context, id int32) (Project, error) {
	row := q.db.QueryRowContext(ctx, getProjectById, id)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.StartDate,
		&i.EndDate,
		&i.Active,
	)
	return i, err
}

const getProjects = `-- name: GetProjects :many
SELECT id, name, description, start_date, end_date, active FROM projects
`

func (q *Queries) GetProjects(ctx context.Context) ([]Project, error) {
	rows, err := q.db.QueryContext(ctx, getProjects)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.StartDate,
			&i.EndDate,
			&i.Active,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProjectById = `-- name: UpdateProjectById :one
UPDATE  projects
SET active = $2
WHERE id = $1 RETURNING id, name, description, start_date, end_date, active
`

type UpdateProjectByIdParams struct {
	ID     int32 `json:"id"`
	Active bool  `json:"active"`
}

func (q *Queries) UpdateProjectById(ctx context.Context, arg UpdateProjectByIdParams) (Project, error) {
	row := q.db.QueryRowContext(ctx, updateProjectById, arg.ID, arg.Active)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.StartDate,
		&i.EndDate,
		&i.Active,
	)
	return i, err
}
